// import the effect and state hooks from react
import { useEffect, useState } from 'react';

import {useRouter} from 'next/router'

import Head from 'next/head'

import Typography from '@mui/material/Typography';
import Container from '@mui/material/Container';

import NavBar from '@components/NavBar';
import SimpleDetailsCard from '@components/SimpleDetailsCard';

// import our api functions
import { getAgency } from '@utils/api/agencies';

/*
This file is going to be using the url path /agency/whateveridnumber
beacuse our file path in pages is /agency/[agencyId].js
What we'll do is we'll use the router to use the agencyId from
router.query to display it.
*/
export default function Agency() {
  // we need to create our state
  const [isLoading, setIsLoading] = useState(true)
  // initialize our agency to empty
  const [agency, setAgency] = useState()

  const router = useRouter()

  // get the agencyId (again look at the file name)
  const { agencyId } = router.query

  // Challenge:
  // import getAgency from the api folder
  // you're going to create the state to load the data
  // you're going t handle the loading states
  // create a function to get the agency data using
  // the agencyId specified above.
  // you'll trigger this in a useEffect that is listening
  // to agencyId and you'll only run the "load" function
  // if agencyId is defined or router.isReady is true.

  const loadAgency = async () => {
    // get the data from the backend
    const data = await getAgency(agencyId)
    // handle the state
    setIsLoading(false)
    setAgency(data)
  }

  useEffect(()=> {
    // we're going to use the line below to see that the agencyId
    // begins as "undefined" when the router isn't ready
    // and then it becomes defined.
    console.log(`trigged agencyId change current value: ${agencyId}`)
    // we're going to handle this in one of two ways
    // option 1: create a guard if the agencyId doesn't exist
    if (!agencyId) {
      return // nothing below will execute if the agencyId is not defined.
    }
    // option 2: create a guard that will listen to router.isReady
    // if (!router.isReady) {
    //   return
    // }


    // we're going load the agency data
    loadAgency()

  }, [agencyId]) // we're listening to changes in the agencyId

  // handle our loading state
  if (isLoading) {
    return `Loading agency ${agencyId}`
  }

  // you can see the data of agency
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

        <NavBar />

        <Container sx={{paddingTop:2}} component="main" maxWidth="xs">

          <Typography variant="h3">
            {/* Display the agency */}
            {agency.name} ({agency.abbrev})
          </Typography>
          <Typography variant="p">
            {agency.description}
          </Typography>
          {/*
            I want you to import the simpledetail card
            you'll use this when looping through the
            agency.spacecraft_list
            I want you to pass the name of the pass craft
            as the "description" prop
            I want you to pass a callback funtion using
            router.push to the path /spacecraft/idyoullusehere
            as the buttonCallback prop
            I want you to passin "go to spacecraft" as the buttonName prop
          */}
          {agency.spacecraft_list.map((spacecraft)=> {
            return <SimpleDetailsCard
              key={spacecraft.id} // this is for lists in jsx.
              description={spacecraft.name}
              buttonCallback={()=> {
                // this will navigate to the new spacecraft page.
                router.push(`/spacecraft/${spacecraft.id}`)
              }}
              buttonName={"Go to spacecraft"}
            />
          })}


          <ul>
          {/* see all query params */
          Object.keys(router.query).map((param, index)=> {
            return <li key={index}>{param}, value: {router.query[param]}</li>
          })}
          </ul>
        </Container>

    </div>
  )
}
