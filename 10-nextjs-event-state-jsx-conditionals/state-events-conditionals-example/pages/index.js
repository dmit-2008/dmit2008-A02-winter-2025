import {useState} from 'react'

import Head from 'next/head'

import Alert from '@mui/material/Alert';
import Button from '@mui/material/Button';
import Container from '@mui/material/Container';
import Grid from '@mui/material/Grid';

import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemText from '@mui/material/ListItemText';
import TextField from '@mui/material/TextField';
import Typography from '@mui/material/Typography';

// custom imports
import { MOVIE_LIST } from '../utils/movies'

export default function Home() {
  // make the inputs controlled
  const [search, setSearch] = useState("")
  // do the year
  const [year, setYear] = useState("")
  // make the movie list stateful.
  const [movies, setMovies] = useState(MOVIE_LIST)

  const [errorMessage, setErrorMessage] = useState("")

  // we're going to filter the movies
  // what do we need
  // MOVIE_LIST (use this as the beginning of your temporary array)
  // we'll have to compare the inputs
  // to the name and year
  // we're going to need to set the movies.
  const handleForm = (event) => {
    event.preventDefault()
    // validate year first.
    // this might something that might be handy for your assignment.
    if (validateYear()) {
      setMovies([])
    }

    // create the temporary list
    let filteredMovies = [...MOVIE_LIST]
    // I'm going to check if there's a search value.
    if (search.trim() !== "") {
      // i'll filter based on the search value.
      filteredMovies = filteredMovies.filter((movie)=> {
        let lowerMovie = movie.name.toLowerCase()
        let lowerSearch = search.toLowerCase()
        return lowerMovie.includes(lowerSearch)
      })
    }
    // implement the year search
    if (year.trim() !== "") {
      // filter through the movies.
      filteredMovies = filteredMovies.filter((movie)=> {
        return parseInt(year) === movie.year
      })
    }
    // we'll be setting the state after we perform our filter.
    setMovies(filteredMovies)
  }

  // we're going to validate the year.
  const validateYear = () => {
    // if the string is empty it's a valid search
    if (year.trim() === "") {
      setErrorMessage("")
      return true
    }
    // I want you to check if year is a string
    if (isNaN(year)) {
      setErrorMessage(`"${year}" is not a number`)
      return false
    }
    // or if the year is greater than 2200 or less 1895
    if (parseInt(year) > 2200 || parseInt(year) < 1895) {
      setErrorMessage("Not a valid year")
      return false
    }
    // I want you to display an error message in an alert
    // return true if it's and false if it isn't

    // return true on the default case.
    setErrorMessage("")
    return true

  }

  return (
    <div>
      <Head>
        <title>Our Movie App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
      </Head>

      <main>
        <Container>
          <Typography variant="h2" component="h2" style={{textAlign: "center"}}>
            Movies
          </Typography>
          <form
            onSubmit={handleForm}
            style={{width: '100%'}}
          >
            <Grid container spacing={2}>
              <Grid item xs={6}>
                <TextField
                  id="search-field"
                  label="search..."
                  variant="standard"
                  sx={{width: '100%'}}
                  value={search}
                  onChange={(event) => {
                    setSearch(event.target.value)
                  }}

                />
              </Grid>
              <Grid item xs={4}>
                {/* we can add some error on the year itself */}
                <TextField
                  id="year-field"
                  label="year"
                  variant="standard"
                  sx={{width: '100%'}}
                  value={year}
                  onChange={(event) => {
                    setYear(event.target.value)
                  }}
                  error={errorMessage !== ""}
                  helperText={errorMessage}
                />
              </Grid>
              <Grid item xs={2}>
                <Button
                  type="submit"
                  variant="contained"
                >Filter</Button>
              </Grid>
              <Grid item xs={10}>
                {/*
                  use a short circuit here which is essentially
                  an if statement next lines can be read as
                  if (errorMessage !== "") {
                    show alert
                  }
                */
                  errorMessage !== "" &&
                  <Alert severity="error">
                    {errorMessage}
                  </Alert>
                }


              </Grid>
            </Grid>
          </form>
          <List sx={{width: `100%`}}>
          {/* I want you folks to use a ternary to display
          the number of results or "no results found."
          below can be read as an if ... else statement
          */
            movies.length !== 0 ?
              <ListItem>
                <ListItemText
                  primary={`Found ${movies.length} results`}
                />
              </ListItem>
              :
              <ListItem>
                <ListItemText
                  primary={`No results found`}
                />
              </ListItem>
          }


          { movies.map((movieData, index)=> {
              return <ListItem key={index}>
                <ListItemText
                  primary={`${movieData.name} (${movieData.year})`}
                />
              </ListItem>
            })
          }
          </List>
        </Container>
      </main>
    </div>
  )
}
